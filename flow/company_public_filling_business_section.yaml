id: company_public_filling_business_section
namespace: edgar
description: |
  the goal is to extract business section from 10K files of NASDAQ 100 companies.
  step1, find cik ticker table if not exists. get cik from this table
  step2, curl company submission in json format and save it, name it with company name and date processed
  step3, find the latest file from submission.json. return file accession number
  step4, request document index from cik and accession number. 
  step5, find the document content file from the index in .htm
  step6, request document text, return full document in html
  step7, find business section, return url with href. 
  step8, extract text between item1 business to item 1A risk factor. save txt file
  step9, put extract txt file into data lake
  step10, get word count from txt file

inputs:
  - id: ticker
    type: STRING
    displayName: "ticker"
    defaults: "AAPL"

  - id: file_type
    type: SELECT
    displayName: Select file type
    values: ["10-K", "10-Q", "8-K"]
    defaults: "10-K"

  - id: word_of_interest
    type: STRING
    displayName: "word of interest"
    defaults: "AI"

variables:
  submission_file: "CIK{{ outputs.get_cik.vars.CIK }}.json"
  business_section_file: "{{inputs.ticker}}_{{inputs.file_type}}_business_section.txt"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/business_section/{{vars.business_section_file}}"
  business_section_data: "{{ outputs.get_business_section.outputFiles[inputs.ticker ~ '_' ~ inputs.file_type ~ '_business_section.txt'] }}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file_type: "{{inputs.file_type}}"
      ticker: "{{inputs.ticker}}"

  # step 1
  - id: get_cik
    type: io.kestra.plugin.scripts.python.Commands
    namespaceFiles:
      enabled: true
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    containerImage: python:slim
    warningOnStdErr: false
    beforeCommands:
      - pip install pandas kestra
    commands:
      - python get_cik.py "{{inputs.ticker}}"
    disabled: false

  # step 2
  - id: extract
    type: io.kestra.plugin.core.http.Download
    uri: https://data.sec.gov/submissions/CIK{{ outputs.get_cik.vars.CIK }}.json
    method: GET
    contentType: application/json
    headers:
      User-Agent: xchencws@citibank.com
  - id: print_output_file_uri
    type: io.kestra.plugin.core.log.Log
    message: "{{ outputs.extract.uri }}"
  - id: print_gcs_location
    type: io.kestra.plugin.core.log.Log
    message: "gs://{{kv('GCP_BUCKET_NAME')}}/submission_file/CIK{{ outputs.get_cik.vars.CIK }}.json"
    
  - id: upload_submission_file_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ outputs.extract.uri }}"
    to: "gs://{{kv('GCP_BUCKET_NAME')}}/submission_file/CIK{{ outputs.get_cik.vars.CIK }}.json"
  
  # step 3-8
  - id: get_business_section
    type: io.kestra.plugin.scripts.python.Commands
    namespaceFiles:
      enabled: true
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
    containerImage: python:slim
    warningOnStdErr: false
    beforeCommands:
      - pip install pandas kestra requests BeautifulSoup4 
    inputFiles:
      CIK.json: "{{ outputs.extract.uri }}"
    outputFiles:
      - "*.txt"
    commands:
      - python business_overview_v3.py "{{ outputs.get_cik.vars.CIK }}" "{{ inputs.ticker}}" "{{ inputs.file_type}}" "{{ outputs.extract.uri }}" "{{ inputs.word_of_interest}}"
    disabled: false

  - id: if_business_section_exists
    type: io.kestra.plugin.core.flow.If
    condition: "{{outputs.get_business_section.vars.total_word_count > 0}}"
    then:
    # step 9
    - id: upload_extracted_txt_to_gcs
      type: io.kestra.plugin.gcp.gcs.Upload
      from: "{{ render(vars.business_section_data) }}"
      to: "{{ render(vars.gcs_file) }}"

    - id: business_section_word_count_schema
      type: io.kestra.plugin.gcp.bigquery.Query
      sql: |
        CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.file_word_count`
            (
            row_id BYTES OPTIONS (description = 'A unique identifier, generated by hashing key file attributes.'),
            filename STRING OPTIONS (description = 'business section file name'),
            last_modified_date TIMESTAMP OPTIONS (description = 'file last modified date'),
            total_word_count INTEGER OPTIONS (description = 'count of total word in file'),
            word_of_interest_count INTEGER OPTIONS (description = 'count word of interest in file')
            )

    # step 10
    - id: business_section_word_count_table
      type: io.kestra.plugin.gcp.bigquery.Query
      sql: |
        INSERT `{{kv('GCP_DATASET')}}.file_word_count` (row_id, filename, last_modified_date, total_word_count, word_of_interest_count)
        WITH staging_row as (
            SELECT
                md5(concat("{{ render(vars.business_section_file) }}", "{{outputs.get_business_section.vars.last_modified_date}}")) as row_id,
                "{{ render(vars.business_section_file) }}" as filename, 
                timestamp("{{outputs.get_business_section.vars.last_modified_date}}") as last_modified_date,
                {{outputs.get_business_section.vars.total_word_count}} as total_word_count, 
                {{outputs.get_business_section.vars.interest_word_count}} as word_of_interest_count)
            SELECT * FROM staging_row WHERE NOT EXISTS (
                SELECT * FROM `{{kv('GCP_DATASET')}}.file_word_count` t WHERE t.row_id = staging_row.row_id
            )
  
  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false
            
pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_SERVICE_ACCOUNT')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

